From 614f6a10ed29e5ecb840d49db44e8122d4babb93 Mon Sep 17 00:00:00 2001
From: Oliver Tonnesen <oliver@tonnesen.com>
Date: Sun, 8 Jan 2023 15:55:26 -0800
Subject: [PATCH] Replace marshmallow-enum with native marshmallow.fields.Enum
 (#227)

Authored-by: Oliver Tonnesen <oliver.tonnesen@panienergy.com>
---
 marshmallow_dataclass/__init__.py | 14 +++++++++-----
 setup.py                          |  5 ++++-
 tests/test_field_for_schema.py    | 18 ++++++++++++------
 4 files changed, 26 insertions(+), 13 deletions(-)

diff --git a/marshmallow_dataclass/__init__.py b/marshmallow_dataclass/__init__.py
index cb00aa0..106cde2 100644
--- a/marshmallow_dataclass/__init__.py
+++ b/marshmallow_dataclass/__init__.py
@@ -40,7 +40,7 @@ class User:
 import threading
 import types
 import warnings
-from enum import EnumMeta
+from enum import Enum
 from functools import lru_cache, partial
 from typing import (
     Any,
@@ -715,10 +715,14 @@ def field_for_schema(
         )
 
     # enumerations
-    if isinstance(typ, EnumMeta):
-        import marshmallow_enum
+    if issubclass(typ, Enum):
+        try:
+            return marshmallow.fields.Enum(typ, **metadata)
+        except AttributeError:
+            # Remove this once support for python 3.6 is dropped.
+            import marshmallow_enum
 
-        return marshmallow_enum.EnumField(typ, **metadata)
+            return marshmallow_enum.EnumField(typ, **metadata)
 
     # Nested marshmallow dataclass
     # it would be just a class name instead of actual schema util the schema is not ready yet
@@ -731,7 +735,7 @@ def field_for_schema(
         nested_schema
         or forward_reference
         or _RECURSION_GUARD.seen_classes.get(typ)
-        or _internal_class_schema(typ, base_schema, typ_frame)
+        or _internal_class_schema(typ, base_schema, typ_frame)  # type: ignore [arg-type]
     )
 
     return marshmallow.fields.Nested(nested, **metadata)
diff --git a/setup.py b/setup.py
index 1ac5603..21f7bb9 100644
--- a/setup.py
+++ b/setup.py
@@ -18,7 +18,10 @@
 ]
 
 EXTRAS_REQUIRE = {
-    "enum": ["marshmallow-enum"],
+    "enum": [
+        "marshmallow-enum; python_version < '3.7'",
+        "marshmallow>=3.18.0,<4.0; python_version >= '3.7'",
+    ],
     "union": ["typeguard"],
     "lint": ["pre-commit~=2.17"],
     ':python_version == "3.6"': ["dataclasses", "types-dataclasses<0.6.4"],
diff --git a/tests/test_field_for_schema.py b/tests/test_field_for_schema.py
index 93f49d7..0e60f0b 100644
--- a/tests/test_field_for_schema.py
+++ b/tests/test_field_for_schema.py
@@ -114,17 +114,23 @@ def test_optional_str(self):
         )
 
     def test_enum(self):
-        import marshmallow_enum
-
         class Color(Enum):
             RED: 1
             GREEN: 2
             BLUE: 3
 
-        self.assertFieldsEqual(
-            field_for_schema(Color),
-            marshmallow_enum.EnumField(enum=Color, required=True),
-        )
+        if hasattr(fields, "Enum"):
+            self.assertFieldsEqual(
+                field_for_schema(Color),
+                fields.Enum(enum=Color, required=True),
+            )
+        else:
+            import marshmallow_enum
+
+            self.assertFieldsEqual(
+                field_for_schema(Color),
+                marshmallow_enum.EnumField(enum=Color, required=True),
+            )
 
     def test_literal(self):
         self.assertFieldsEqual(
